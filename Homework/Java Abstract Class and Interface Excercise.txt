1. Which of the following is FALSE about abstract classes in Java

A If we derive an abstract class and do not implement all the abstract methods, then the derived class should also be marked as abstract using 'abstract' keyword
B Abstract classes can have constructors
C A class can be made abstract without any abstract method
D A class can inherit from multiple abstract classes.
Java Abstract Class and Interface

2. Which of the following is true about interfaces in java.
(1) An interface can contain following type of members.
....public, static, final fields (i.e., constants) 
....default and static methods with bodies

(2) An instance of interface can be created.

(3) A class can implement multiple interfaces.

(4) Many classes can implement the same interface.

A 1, 3 and 4
B 1, 2 and 4
C 2, 3 and 4
D 1, 2, 3 and 4

3. Predict the output of the following program.
abstract class demo
{
    public int a;
    demo()
    {
        a = 10;
    }
 
    abstract public void set();
     
    abstract final public void get();
 
}
 
class Test extends demo
{
 
    public void set(int a)
    {
        this.a = a;
    }
 
    final public void get()
    {
        System.out.println("a = " + a);
    }
 
    public static void main(String[] args)
    {
        Test obj = new Test();
        obj.set(20);
        obj.get();
    }
}

A a = 10
B a = 20
C Compilation error

4. Which of the following statement(s) with regard to an abstract class in JAVA is/are TRUE ? 
I. An abstract class is one that is not used to create objects. 
II. An abstract class is designed only to act as a base class to be inherited by other classes.

A Only I
B Only II
C Neither I nor II
D Both I and II

5. Given: 
-------------- Test.java source code ------------------
 
public interface Test {
    String name ="Test";
    void test();
}
Which of the following statements is true:

A.  Any class that implements Test will not be able to access the name attribute unless it is in the same package

B.  Any class that implements Test must define a concrete method public void test()

C.  Any interface that extends Test must override the test() method

D.  Any object instantiated from a class that implements Test can update the name attribute if it is in the same package

E.  Any class that implements Test can define its own field name

F.  None of the above

6. Given: 

-------------- Test.java source code ------------------
 
public interface Test {
    public static int counter;   
    
    private void doItPrivately() {  
        System.out.println("A private method");
    }
 
    void doThat();  
    
    default String doThat(String s) {  
        return s;
    } 	
}

Which single change when made alone, would allow this code to compile? 

A. Change 'public static int counter;' to 'public static final int counter;'

B. Remove the method doItPrivately altogether

C. Change 'void doThat();' to 'public void doThat();'

D. Change 'void doThat();' to 'abstract void doThat();'

E. Change 'default String doThat(String s) {'  to 'String doThat(String s) {'

F. Remove the method  'default String doThat(String s)' altogether

G. Code compiles fine the way it is

H. None of the above.


7. Which of the following statements are true? Pick one answer.

A. An interface should be used to maintain state for instances which implement the interface

B. An abstract method can be declared in any interface or class that is extensible.

C. Private methods are not supported on interfaces

D. You cannot define concrete methods on an interface

E. You cannot define concrete methods on an abstract class

F. An interface can have private static variables.

G. A class can implement multiple interfaces.

8. Given:

 -------------- Test.java source code ------------------
 
interface ITest {
    void myMethod();
}
abstract class ATest implements ITest {
    abstract void myMethod(); // Line 1
}
 
public class Test extends ATest {
    public static void main(String[] args) {
        Test t = new Test();
        t.myMethod();
    }
 
    public void myMethod() {   // Line 2
        System.out.println("Success");
    }
}
Which statements are true about the code above?  Pick all that apply

A. Nothing is wrong with the code.  Compiles and prints: Success

B. An abstract class cannot override a method in an interface as is done on Line 1

C. ATest must fully implement myMethod on Line 1, it cannot be abstract

D. Code will compile if you change declaration on Line 1 to include public access modifier

E. Compiler indicates clashing method name on Line 2

F. None of the above.








